[
    %% lager config
    {lager, [
        {colored, true},
        {handlers, [
            %% show info level or higher level logs at console
            {lager_console_backend, [{level, info}, {formatter, lager_default_formatter},
                                     {formatter_config, [color, "[", sev, " ", time, " ", pid, "] ", message, "\e[0m\r\n"]}]},
            %% rotate error log when it reaches 50 MB; keep 10 rotated logs
            {lager_file_backend, [
                {file, "{{platform_log_dir}}/error.log"},
                {level, error},
                {size, 52428800},
                {count, 10},
                {formatter, lager_default_formatter},
                {formatter_config, ["[", sev, " ", date, " ", time, " ", pid, "] ", message, "\n"]}
            ]},
            %% rotate info log when it reaches 50 MB; keep 10 rotated logs
            {lager_file_backend, [
                {file, "{{platform_log_dir}}/info.log"},
                {level, info},
                {size, 52428800},
                {count, 10},
                {formatter, lager_default_formatter},
                {formatter_config, ["[", sev, " ", date, " ", time, " ", pid, "] ", message, "\n"]}
            ]},
            %% rotate debug log when it reaches 50 MB; keep 10 rotated logs
            {lager_file_backend, [
                {file, "{{platform_log_dir}}/debug.log"},
                {level, debug},
                {size, 52428800},
                {count, 10},
                {formatter, lager_default_formatter},
                {formatter_config, ["[", sev, " ", date, " ", time, " ", pid, "] ", message, "\n"]}
            ]}
        ]},
        % Limit for the number of messages per second allowed from error_logger
        {error_logger_hwm, 200},
        % When lager should change mode to synchronous (log queue is longer than async_threshold)
        {async_threshold, 500},
        % When lager should return from synchronous mode to asynchronous (log queue is shorter than (async_threshold - async_threshold_window)
        {async_threshold_window, 50}
    ]},

    %% mnesia config
    {mnesia, [
        {dir, "{{platform_data_dir}}/mnesia"}
    ]},

    {ctool, [
        {verify_oz_cert, true}
    ]},

    %% onepanel config
    {onepanel, [
        %% ===================================================================
        %% GENERAL
        %% ===================================================================
        % Build version in form:
        % <number of commits since last tag>-g<last commit hash abbrev>
        % e.g. 19-g0d0fd5b
        {build_version, "{{{build_version}}}"},

        %% ===================================================================
        %% PORTS
        %% ===================================================================
        {advertise_port, 8888},
        {rest_port, 9443},
        {op_worker_nagios_port, 443},
        {oz_worker_nagios_port, 443},


        {advertise_address, "239.255.0.1"},
        {advertise_max_delay, 5000},

        {release_type, {{release_type}} },

        %% ===================================================================
        %% Server certificates
        %% ===================================================================

        %% NOTE - below certificates will be reused by underlying
        %% Oneprovider / Onezone.
        %% Path to private key used by web server
        {web_key_file, "{{platform_etc_dir}}/certs/web_key.pem"},
        %% Path to certificate used by web server
        {web_cert_file, "{{platform_etc_dir}}/certs/web_cert.pem"},
        %% Path to certificate chain file used by web server
        {web_cert_chain_file, "{{platform_etc_dir}}/certs/web_chain.pem"},

        %% Path to directory with trusted CA certificates
        {cacerts_dir, "{{platform_etc_dir}}/cacerts"},

        %% ===================================================================
        %% Let's Encrypt configuration
        %% ===================================================================

        %% The directory URL of a Certificate Authority server using the ACME protocol
        %% to be used for automated web certificate issuance
        {letsencrypt_directory_url, "https://acme-v01.api.letsencrypt.org/directory"},
        {letsencrypt_directory_url_staging, "https://acme-staging.api.letsencrypt.org/directory"},

        %% Mode of operation with the Let's Encrypt:
        %% - dry        - run full certification procedure against staging server but do NOT
        %%                save obtained certificate
        %% - staging    - obtain certificate from the staging server
        %% - production - obtain certificate from the main Let's Encrypt server
        %% - full       - check certification success as with dry and then obtain certificate
        %%                from the production server
        {letsencrypt_mode, full},

        %% Directory for saving Let's Encrypt account keys (needed for renewal)
        {letsencrypt_keys_dir, "{{platform_etc_dir}}/certs/letsencrypt/"},

        %% Number of consecutive retries on any Let's Encrypt error
        {letsencrypt_attempts, 1},

        %% IPs of DNS servers used to verify that txt record for Let's Encrypt
        %% authorization was properly set
        {letsencrypt_dns_verification_servers, [{8,8,8,8}, {8,8,4,4}, {1,1,1,1}]},

        %% Configures how many days before expiration the certificate should
        %% be scheduled for renewal.
        %% Keep in mind that Let's Encrypt certificates are valid for at most 90 days
        {web_cert_renewal_days, 7},

        %% Seconds between certificate checks
        {web_cert_renewal_check_delay, 3600},

        %% ===================================================================
        %% Test certificates
        %% ===================================================================

        %% If enabled, a new web cert will be generated with CN matching
        %% the test_web_cert_domain and signed by CA cert found under
        %% test_web_cert_ca_path.
        %% NOTE: The generation will be performed upon every startup, any
        %%  existing certs will be backed up and placed in the same directory.
        %% NOTE: This functionality is devised for test purposes and must not
        %%  be used in production.
        {generate_test_web_cert, false},
        %% The domain for which a test cert will be generated
        {test_web_cert_domain, "onedata.org"},
        %% The CA cert to sign auto generated test web certs. The file must
        %% contain both the key and cert.
        {test_web_cert_ca_path, "{{platform_etc_dir}}/OnedataTestWebServerCa.pem"},
        %% If enabled, onepanel will trust any server that has a cert signed by
        %% the OnedataTestWebServerCa.
        %% NOTE: This functionality is devised for test purposes and must not
        %%  be used in production.
        {treat_test_ca_as_trusted, false},

        %% URL of service used for autodetecting external IP
        {ip_check_url, "http://ip4.icanhazip.com"},

        {rest_api_prefix_template, "/api/v{version_number}/onepanel"},
        {rest_https_acceptors, 100},
        {rest_listener_status_check_attempts, 30},

        %% Directory where static files of default, embedded GUI are kept.
        %% Used when gui_custom_static_root is non-existent or empty.
        {gui_default_static_root, "{{platform_data_dir}}/gui_static"},
        %% Directory where onepanel tries to find static files of a custom GUI.
        %% If the directory is not empty, it will serve the static files
        %% from it. If not, it will fall back to default, embedded GUI.
        {gui_custom_static_root, "/var/www/html/onepanel"},

        {rpc_timeout, 1800000},
        {create_tables_timeout, 10000},
        {copy_tables_timeout, 10000},
        {extend_cluster_timeout, 900000},
        {task_ttl, 86400000},
        {service_step_retry_delay, 30000},
        {services_check_delay, 60000},
        {session_ttl, 3600000},
        {wait_for_cluster_attempts, 20},

        {vm_args_file, "{{platform_etc_dir}}/vm.args"},
        {app_config_file, "{{platform_etc_dir}}/app.config"},
        {cmd_log_file, "{{platform_log_dir}}/cmd.log"},

        {default_users, [{<<"admin">>, <<"password">>, admin}]},

        {couchbase_init_timeout, 300000},
        {couchbase_wait_for_init_attempts, 60},
        {couchbase_connect_attempts, 30},
        {couchbase_connect_timeout, 1000},
        {couchbase_user, "admin"},
        {couchbase_password, "password"},
        {couchbase_admin_port, 8091},
        {couchbase_port, 11211},
        {couchbase_server_quota, 4096},
        {couchbase_bucket_quota, 4096},
        {couchbase_open_files_limit, 65535},
        {couchbase_buckets, [
            {oneprovider, [{"onedata", 4096}]},
            {onezone, [{"onedata", 4096}]}
        ]},

        {cluster_manager_vm_args_file, "{{platform_etc_dir}}/../cluster_manager/vm.args"},
        {cluster_manager_app_config_file, "{{platform_etc_dir}}/../cluster_manager/app.config"},
        {cluster_manager_env_file, "{{platform_lib_dir}}/../../cluster_manager/lib/env.sh"},
        {cluster_manager_failover_timeout, 5000},
        {cluster_manager_sync_nodes_timeout, 120000},
        {cluster_manager_open_files_limit, 65535},

        {op_worker_vm_args_file, "{{platform_etc_dir}}/../op_worker/vm.args"},
        {op_worker_app_config_file, "{{platform_etc_dir}}/../op_worker/app.config"},
        {op_worker_open_files_limit, 65535},
        {op_worker_nagios_protocol, "https"},
        {op_worker_wait_for_init_attempts, 60},
        {op_worker_wait_for_init_delay, 5000},


        {oz_worker_vm_args_file, "{{platform_etc_dir}}/../oz_worker/vm.args"},
        {oz_worker_app_config_file, "{{platform_etc_dir}}/../oz_worker/app.config"},
        {oz_worker_open_files_limit, 65535},
        {oz_worker_nagios_protocol, "https"},
        {oz_worker_wait_for_init_attempts, 60},

        {onezone_name, "example"},
        {onezone_domain, "onedata.org"},

        {oneprovider_name, "example"},
        {oneprovider_geo_latitude, 0.0},
        {oneprovider_geo_longitude, 0.0},
        {connect_to_onezone_attempts, 5},

        {oneprovider_sync_max_depth, 65535},
        {oneprovider_sync_update_scan_interval, 10}, % in seconds
        {oneprovider_sync_update_delete_enable, false},
        {oneprovider_sync_update_write_once, false},
        {oneprovider_sync_acl, false}
    ]}
].

