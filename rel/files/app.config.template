[
    % Range of ports that will be used by erlang nodes to communicate
    {kernel, [
        {inet_dist_listen_min, 9100},
        {inet_dist_listen_max, 9139}
    ]},

    %% lager config
    {lager, [
        {colored, true},
        {handlers, [
            %% show info level or higher level logs at console
            {lager_console_backend, [{level, info}, {formatter, lager_default_formatter},
                {formatter_config, [color, "[", sev, " ", time, " ", pid, "] ", message, "\e[0m\r\n"]}]},
            %% rotate error log when it reaches 50 MB; keep 10 rotated logs
            {lager_file_backend, [
                {file, "{{platform_log_dir}}/error.log"},
                {level, error},
                {size, 52428800},
                {count, 10},
                {formatter, lager_default_formatter},
                {formatter_config, ["[", sev, " ", date, " ", time, " ", pid, "] ", message, "\n"]}
            ]},
            %% rotate info log when it reaches 50 MB; keep 10 rotated logs
            {lager_file_backend, [
                {file, "{{platform_log_dir}}/info.log"},
                {level, info},
                {size, 52428800},
                {count, 10},
                {formatter, lager_default_formatter},
                {formatter_config, ["[", sev, " ", date, " ", time, " ", pid, "] ", message, "\n"]}
            ]},
            %% rotate debug log when it reaches 50 MB; keep 10 rotated logs
            {lager_file_backend, [
                {file, "{{platform_log_dir}}/debug.log"},
                {level, debug},
                {size, 52428800},
                {count, 10},
                {formatter, lager_default_formatter},
                {formatter_config, ["[", sev, " ", date, " ", time, " ", pid, "] ", message, "\n"]}
            ]}
        ]},
        % Limit for the number of messages per second allowed from error_logger
        {error_logger_hwm, 200},
        % When lager should change mode to synchronous (log queue is longer than async_threshold)
        {async_threshold, 500},
        % When lager should return from synchronous mode to asynchronous (log queue is shorter than (async_threshold - async_threshold_window)
        {async_threshold_window, 50}
    ]},

    %% mnesia config
    {mnesia, [
        {dir, "{{platform_data_dir}}/mnesia"}
    ]},

    {ctool, [
        % Path to the JSON file holding information about services compatibility
        % and verified gui hashes. This file evolves during service's lifetime -
        % can be overwritten by a newer registry when such is available.
        {compatibility_registry_path, "{{platform_etc_dir}}/compatibility.json"},
        % Path to the default compatibility.json for current software version.
        {default_compatibility_registry, "{{platform_data_dir}}/compatibility.default.json"}
    ]},

    %% onepanel config
    {onepanel, [
        %% ===================================================================
        %% GENERAL
        %% ===================================================================
        % Build version in form:
        % <number of commits since last tag>-g<last commit hash abbrev>
        % e.g. 19-g0d0fd5b
        {build_version, "{{{build_version}}}"},

        {cluster_type, {{release_type}}},

        %% ===================================================================
        %% PORTS
        %% ===================================================================
        {rest_port, 9443},
        {op_worker_nagios_port, 443},
        {oz_worker_nagios_port, 443},

        %% ===================================================================
        %% Server certificates
        %% ===================================================================

        %% NOTE - below certificates will be reused by underlying
        %% Oneprovider / Onezone.
        %% Path to private key used by web server
        {web_key_file, "{{platform_etc_dir}}/certs/web_key.pem"},
        %% Path to certificate used by web server
        {web_cert_file, "{{platform_etc_dir}}/certs/web_cert.pem"},
        %% Path to certificate chain file used by web server
        {web_cert_chain_file, "{{platform_etc_dir}}/certs/web_chain.pem"},

        %% Path to directory with trusted CA certificates
        {cacerts_dir, "{{platform_etc_dir}}/cacerts"},

        %% ===================================================================
        %% Let's Encrypt configuration
        %% ===================================================================

        %% The directory URL of a Certificate Authority server using the ACME protocol
        %% to be used for automated web certificate issuance
        {letsencrypt_directory_url, "https://acme-v02.api.letsencrypt.org/directory"},
        {letsencrypt_directory_url_staging, "https://acme-staging-v02.api.letsencrypt.org/directory"},

        %% Mode of operation with the Let's Encrypt:
        %% - dry        - run full certification procedure against staging server but do NOT
        %%                save obtained certificate
        %% - staging    - obtain certificate from the staging server
        %% - production - obtain certificate from the main Let's Encrypt server
        %% - full       - check certification success as with dry and then obtain certificate
        %%                from the production server
        {letsencrypt_mode, production},

        %% Directory for saving Let's Encrypt account keys (needed for renewal)
        {letsencrypt_keys_dir, "{{platform_etc_dir}}/certs/letsencrypt/"},

        %% Number of consecutive retries on any Let's Encrypt error
        {letsencrypt_attempts, 1},

        %% IPs of DNS servers used to verify that txt record for Let's Encrypt
        %% authorization was properly set.
        %% Empty list causes use of system defaults.
        {letsencrypt_dns_verification_servers, []},

        %% Regular expression used for checking if existing certificate
        %% was issued by Let's Encrypt.
        %% See https://letsencrypt.org/certificates/ for expected values
        {letsencrypt_issuer_regex, <<"^Let's Encrypt Authority X[34]$">>},

        %% Configures how many days before expiration the certificate should
        %% be scheduled for renewal.
        %% Keep in mind that Let's Encrypt certificates are valid for at most 90 days
        {web_cert_renewal_days, 30},

        %% Seconds between certificate checks
        {web_cert_renewal_check_delay, 3600},

        %% ===================================================================
        %% Test certificates
        %% ===================================================================

        %% If enabled, a new web cert will be generated with CN matching
        %% the test_web_cert_domain and signed by CA cert found under
        %% test_web_cert_ca_path.
        %% NOTE: The generation will be performed upon every startup, any
        %%  existing certs will be backed up and placed in the same directory.
        %% NOTE: This functionality is devised for test purposes and must not
        %%  be used in production.
        {generate_test_web_cert, false},
        %% The domain for which a test cert will be generated
        {test_web_cert_domain, "onedata.org"},
        %% The CA cert to sign auto generated test web certs. The file must
        %% contain both the key and cert.
        {test_web_cert_ca_path, "{{platform_etc_dir}}/OnedataTestWebServerCa.pem"},
        %% If enabled, onepanel will trust any server that has a cert signed by
        %% the OnedataTestWebServerCa.
        %% NOTE: This functionality is devised for test purposes and must not
        %%  be used in production.
        {treat_test_ca_as_trusted, false},

        %% URL of service used for autodetecting external IP
        {ip_check_url, "http://ip4.icanhazip.com"},

        {onezone_configuration_urn, "/api/v3/onezone/configuration"},

        %% IPs of DNS servers used to validate domain configuration.
        %% Empty list causes use of system defaults
        {dns_check_servers, []},

        %% Interval between DNS checks in seconds. Default: 6 hours
        {dns_check_interval, 21600},

        %% Boolean used in oz_panel. Indicates whether to check for
        %% DNS zone delegation.
        {dns_expect_zone_delegation, true},

        %% Username of the admin user created after Onezone deployment
        {zone_default_admin_username, <<"admin">>},

        {rest_api_prefix_template, "/api/v{version_number}/onepanel"},
        %% Number of accepting processes in HTTPS listeners
        {rest_https_acceptors, 100},
        %% Request timeout in milliseconds, meaning how long the server should
        %% wait for an incoming request since the last activity until it closes
        %% the connection.
        {rest_https_request_timeout, 30000},
        {rest_listener_status_check_attempts, 30},

        %% Path to packaged GUI static files. They will be served
        %% as the emergency GUI and uploaded to Onezone for normal operation.
        {gui_package_path, "{{platform_data_dir}}/gui_static.tar.gz"},

        %% Directory where static files of standalone GUI are served from.
        {gui_static_root, "{{platform_etc_dir}}/gui_static"},

        %% Enable debug logs in browser console
        {gui_debug_mode, false},

        {rpc_timeout, 1800000},
        {create_tables_timeout, 10000},
        {copy_tables_timeout, 10000},
        {wait_for_tables_timeout, 10000},
        {upgrade_tables_timeout, 60000},
        {extend_cluster_timeout, 900000},
        {extend_cluster_attempts, 20},
        {task_ttl, 86400000},
        {service_step_retry_delay, 30000},
        {node_connection_attempts, 90},
        {node_connection_retry_delay, 1000},
        {session_ttl, 86400}, % 24h
        {auth_token_ttl, 86400},
        {wait_for_cluster_attempts, 120},
        {wait_for_cluster_delay, 5000},

        %% Time in milliseconds during which user tokens are cached in op_panel
        {onezone_auth_cache_ttl, 60000},


        % frequency of service healthcheck
        {services_check_period, 60000},

        % time in milliseconds after which cron jobs, such as service healthcheck
        % or certificate renewal, are aborted
        {cron_job_timeout, 3600000}, % 1 hour

        % frequency of the cron ticks
        {cron_period, 1000}, % 1 second

        {onepanel_vm_args_file, "{{platform_etc_dir}}/vm.args"},
        {onepanel_legacy_config_file, "{{platform_etc_dir}}/app.config"},
        {onepanel_app_config_file, "{{platform_data_dir}}/app.config"},
        {onepanel_generated_config_file, "{{platform_etc_dir}}/autogenerated.config"},
        {onepanel_overlay_config_file, "{{platform_etc_dir}}/overlay.config"},

        {couchbase_cmd, "service couchbase-server"},
        {couchbase_init_timeout, 300000},
        {couchbase_wait_for_init_attempts, 60},

        % Couchbase reports healthy status before it's ready to serve requests.
        % This delay provides additional margin of error before starting workers.
        {couchbase_after_init_delay, 4000}, % 4 seconds
        {couchbase_connect_timeout, 1000},
        {couchbase_user, "admin"},
        {couchbase_password, "password"},
        {couchbase_admin_port, 8091},
        {couchbase_port, 11211},
        {couchbase_server_quota, 4096},
        {couchbase_bucket_quota, 4096},
        {couchbase_open_files_limit, 65535},
        {couchbase_buckets, [
            {oneprovider, [{"onedata", 4096}]},
            {onezone, [{"onedata", 4096}]}
        ]},

        {cluster_manager_vm_args_file, "{{platform_etc_dir}}/../cluster_manager/vm.args"},
        {cluster_manager_legacy_config_file, "{{platform_etc_dir}}/../cluster_manager/app.config"},
        {cluster_manager_app_config_file, "{{platform_data_dir}}/../cluster_manager/app.config"},
        {cluster_manager_generated_config_file, "{{platform_etc_dir}}/../cluster_manager/autogenerated.config"},
        {cluster_manager_overlay_config_file, "{{platform_etc_dir}}/../cluster_manager/overlay.config"},
        {cluster_manager_env_file, "{{platform_lib_dir}}/../../cluster_manager/lib/env.sh"},
        {cluster_manager_cmd, "service cluster_manager"},
        {cluster_manager_failover_timeout, 5000},
        {cluster_manager_sync_nodes_timeout, 120000},
        {cluster_manager_open_files_limit, 65535},

        {op_worker_vm_args_file, "{{platform_etc_dir}}/../op_worker/vm.args"},
        {op_worker_legacy_config_file, "{{platform_etc_dir}}/../op_worker/app.config"},
        {op_worker_app_config_file, "{{platform_data_dir}}/../op_worker/app.config"},
        {op_worker_generated_config_file, "{{platform_etc_dir}}/../op_worker/autogenerated.config"},
        {op_worker_overlay_config_file, "{{platform_etc_dir}}/../op_worker/overlay.config"},
        {op_worker_cmd, "service op_worker"},
        {op_worker_open_files_limit, 65535},
        {op_worker_nagios_protocol, "https"},
        {op_worker_wait_for_init_attempts, 60},
        {op_worker_wait_for_init_delay, 5000},
        % should point at the same file as op_worker's env root_macaroon_path
        {op_worker_root_macaroon_path, "{{platform_etc_dir}}/../op_worker/provider_root_macaroon.txt"},


        {oz_worker_vm_args_file, "{{platform_etc_dir}}/../oz_worker/vm.args"},
        {oz_worker_legacy_config_file, "{{platform_etc_dir}}/../oz_worker/app.config"},
        {oz_worker_app_config_file, "{{platform_data_dir}}/../oz_worker/app.config"},
        {oz_worker_cmd, "service oz_worker"},
        {oz_worker_generated_config_file, "{{platform_etc_dir}}/../oz_worker/autogenerated.config"},
        {oz_worker_overlay_config_file, "{{platform_etc_dir}}/../oz_worker/overlay.config"},
        {oz_worker_open_files_limit, 65535},
        {oz_worker_nagios_protocol, "https"},
        {oz_worker_wait_for_init_attempts, 60},
        {oz_worker_wait_for_init_delay, 5000},

        {onezone_name, "example"},
        {onezone_domain, "onedata.org"},

        {oneprovider_name, "example"},
        {oneprovider_geo_latitude, 0.0},
        {oneprovider_geo_longitude, 0.0},
        {connect_to_onezone_attempts, 5},

        {oneprovider_sync_max_depth, 65535},
        {oneprovider_sync_update_scan_interval, 10}, % in seconds
        {oneprovider_sync_update_delete_enable, false},
        {oneprovider_sync_update_write_once, false},
        {oneprovider_sync_acl, false}
    ]}
].

